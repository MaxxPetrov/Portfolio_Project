{
	"info": {
		"_postman_id": "aaab3b4c-6b30-4699-9d01-eb41893c88b4",
		"name": "Spotify_Web_Player_API_Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21973994"
	},
	"item": [
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "TC19_Pos_Create a Playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {",
									"    case 201:",
									"        tests[\"201 ok. The request has succeeded\"] = true;",
									"        break;",
									"    case 400:",
									"        tests[\"400 Bad Request\"] = false;",
									"        break;",
									"    case 401:",
									"        tests[\"401 Bad or expired token\"] = false;",
									"        break;",
									"    case 403:",
									"        tests[\"403 Bad OAuth request\"] = false;",
									"        break;",
									"    case 429:",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;",
									"        break;",
									"    default:",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
									"}",
									"",
									"if (responseCode.code === 201) {",
									"    var playlist = JSON.parse(responseBody);",
									"    ",
									"    // Store the playlist id in the environment to add tracks in the future",
									"    postman.setEnvironmentVariable(\"playlist_id\", playlist.id);",
									"}",
									"",
									"pm.test(\"Response time is less than 800 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test(\"Response Size is less than 2Kb\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);",
									"});",
									"",
									"pm.test(\"Response must be ok to be processed\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"});",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");",
									"    pm.response.to.have.header(\"content-encoding\", \"gzip\");",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");",
									"    pm.response.to.have.header(\"server\", \"envoy\");",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');",
									"});",
									"",
									"pm.test(\"The response body contains the correct data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.collaborative).to.eql(false);",
									"    pm.expect(jsonData.description).to.eql(null);",
									"    pm.expect(jsonData.external_urls.spotify).to.eql(\"https://open.spotify.com/playlist/\" + pm.environment.get(\"playlist_id\"));",
									"    pm.expect(jsonData.followers.href).to.eql(null);",
									"    pm.expect(jsonData.followers.total).to.eql(0);",
									"    pm.expect(jsonData.href).to.eql(\"https://api.spotify.com/v1/playlists/\" + pm.environment.get(\"playlist_id\"));",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"playlist_id\"));",
									"    pm.expect(jsonData.images).to.eql([]);",
									"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"playlist_name\"));",
									"    pm.expect(jsonData.owner.display_name).to.eql(\"rasacet733\");",
									"    pm.expect(jsonData.owner.external_urls.spotify).to.eql(\"https://open.spotify.com/user/\" + pm.environment.get(\"user_id\"));",
									"    pm.expect(jsonData.owner.href).to.eql(\"https://api.spotify.com/v1/users/\" + pm.environment.get(\"user_id\"));",
									"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"user_id\"));",
									"    pm.expect(jsonData.owner.type).to.eql(\"user\");",
									"    pm.expect(jsonData.owner.uri).to.eql(\"spotify:user:\" + pm.environment.get(\"user_id\"));",
									"    pm.expect(jsonData.primary_color).to.eql(null);",
									"    pm.expect(jsonData.public).to.eql(false);",
									"    pm.expect(jsonData.tracks.href).to.eql(\"https://api.spotify.com/v1/playlists/\"+ pm.environment.get(\"playlist_id\") + \"/tracks\");",
									"    pm.expect(jsonData.tracks.items).to.eql([]);",
									"    pm.expect(jsonData.tracks.limit).to.eql(100);",
									"    pm.expect(jsonData.tracks.next).to.eql(null);",
									"    pm.expect(jsonData.tracks.offset).to.eql(0);",
									"    pm.expect(jsonData.tracks.previous).to.eql(null);",
									"    pm.expect(jsonData.tracks.total).to.eql(0);",
									"    pm.expect(jsonData.type).to.eql(\"playlist\");",
									"    pm.expect(jsonData.uri).to.eql(\"spotify:playlist:\"+ pm.environment.get(\"playlist_id\"));",
									"});",
									"",
									"pm.test(\"The response body must be in the correct type\", function() {",
									"    let jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.collaborative).to.be.a(\"boolean\");",
									"    pm.expect(jsonResponse.description).to.be.a(\"null\");",
									"    pm.expect(jsonResponse.external_urls.spotify).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.followers.href).to.be.a(\"null\");",
									"    pm.expect(jsonResponse.followers.total).to.be.a(\"number\");",
									"    pm.expect(jsonResponse.href).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.id).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.name).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.owner.display_name).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.owner.external_urls.spotify).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.owner.href).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.owner.id).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.owner.type).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.owner.uri).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.primary_color).to.be.a(\"null\");",
									"    pm.expect(jsonResponse.public).to.be.a(\"boolean\");",
									"    pm.expect(jsonResponse.tracks.href).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.tracks.limit).to.be.a(\"number\");",
									"    pm.expect(jsonResponse.tracks.next).to.be.a(\"null\");",
									"    pm.expect(jsonResponse.tracks.offset).to.be.a(\"number\");",
									"    pm.expect(jsonResponse.tracks.previous).to.be.a(\"null\");",
									"    pm.expect(jsonResponse.tracks.total).to.be.a(\"number\");",
									"    pm.expect(jsonResponse.type).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.uri).to.be.a(\"string\");  ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"playlist_name\");\r",
									"\r",
									"const playlist_n = [\r",
									" 'My Playlist', 'My New Playlist', 'Best Music', 'Rock playlist', 'My Songs', 'Greatest Hits'\r",
									"];\r",
									"const randomPlaylist = playlist_n[Math.floor(Math.random() * playlist_n.length)];\r",
									"pm.environment.set(\"playlist_name\", randomPlaylist);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{playlist_name}}\",\n  \"public\": \"false\"\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/users/{{user_id}}/playlists",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"users",
								"{{user_id}}",
								"playlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC20_Pos_Change Playlist Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {\r",
									"    case 200:\r",
									"        tests[\"200 ok. The request has succeeded\"] = true;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 Bad Request\"] = false;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 Bad or expired token\"] = false;\r",
									"        break;\r",
									"    case 403:\r",
									"        tests[\"403 Bad OAuth request\"] = false;\r",
									"        break;\r",
									"    case 429:\r",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 800 ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Size is less than 2Kb\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be ok to be processed\", function () {\r",
									"    pm.response.to.not.be.error;   \r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");\r",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");\r",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");\r",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");\r",
									"    pm.response.to.have.header(\"Content-Length\", \"0\");\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"server\", \"envoy\");\r",
									"    pm.response.to.have.header(\"Via\", \"HTTP/2 edgeproxy, 1.1 google\");\r",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');       \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.unset(\"playlist_name\");\r",
									"pm.environment.unset(\"description\");\r",
									"\r",
									"let playlist = pm.variables.replaceIn('{{$randomVerb}}'+\" \")\r",
									"pm.environment.set(\"playlist_name\", playlist);\r",
									"\r",
									"let descr = pm.variables.replaceIn('{{$randomPhrase}}')\r",
									"pm.environment.set(\"description\", descr);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{playlist_name}} \",\r\n    \"description\": \"{{description}}\",\r\n    \"public\": false\r\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{playlist_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC21_Pos_Add Items to Playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {\r",
									"    case 201:\r",
									"        tests[\"201 ok. The request has succeeded\"] = true;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 Bad Request\"] = false;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 Bad or expired token\"] = false;\r",
									"        break;\r",
									"    case 403:\r",
									"        tests[\"403 Bad OAuth request\"] = false;\r",
									"        break;\r",
									"    case 429:\r",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 800 ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Size is less than 2Kb\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be ok to be processed\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");\r",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");\r",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");\r",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");\r",
									"    pm.response.to.have.header(\"content-encoding\", \"gzip\");\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"server\", \"envoy\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Via\", \"HTTP/2 edgeproxy, 1.1 google\");\r",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');          \r",
									"});\r",
									"\r",
									"pm.test(\"The response body must be in the correct type\", function() {\r",
									"    let jsonResponse = pm.response.json();     \r",
									"    pm.expect(jsonResponse.snapshot_id).to.be.a(\"string\");  \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"uris\": [\n        \"spotify:track:{{track_uris}}\"\n    ],\n    \"position\": 0\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{playlist_id}}",
								"tracks"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC22_Pos_Remove Playlist Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {",
									"    case 200:",
									"        tests[\"200 ok. The request has succeeded\"] = true;",
									"        break;",
									"    case 400:",
									"        tests[\"400 Bad Request\"] = false;",
									"        break;",
									"    case 401:",
									"        tests[\"401 Bad or expired token\"] = false;",
									"        break;",
									"    case 403:",
									"        tests[\"403 Bad OAuth request\"] = false;",
									"        break;",
									"    case 429:",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;",
									"        break;",
									"    default:",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
									"}",
									"",
									"pm.test(\"Response time is less than 800 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test(\"Response Size is less than 2Kb\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);",
									"});",
									"",
									"pm.test(\"Response must be ok to be processed\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"});",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");",
									"    pm.response.to.have.header(\"content-encoding\", \"gzip\");",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");",
									"    pm.response.to.have.header(\"server\", \"envoy\");",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");",
									"    pm.response.to.have.header(\"Via\", \"HTTP/2 edgeproxy, 1.1 google\");",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');          ",
									"});",
									"",
									"pm.test(\"The response body must be in the correct type\", function() {",
									"    let jsonResponse = pm.response.json();     ",
									"    pm.expect(jsonResponse.snapshot_id).to.be.a(\"string\");  ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tracks\": [\n        {\n            \"uri\": \"spotify:track:{{track_uris}}\"\n        }\n       \n    ]\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{playlist_id}}",
								"tracks"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC23_Pos_Follow Playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {\r",
									"    case 200:\r",
									"        tests[\"200 ok. The request has succeeded\"] = true;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 Bad Request\"] = false;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 Bad or expired token\"] = false;\r",
									"        break;\r",
									"    case 403:\r",
									"        tests[\"403 Bad OAuth request\"] = false;\r",
									"        break;\r",
									"    case 429:\r",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 800 ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Size is less than 2Kb\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be ok to be processed\", function () {\r",
									"    pm.response.to.not.be.error;   \r",
									"    pm.response.to.not.have.jsonBody(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");\r",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");\r",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");\r",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");\r",
									"    pm.response.to.have.header(\"Content-Length\", \"0\");\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"server\", \"envoy\");\r",
									"    pm.response.to.have.header(\"Via\", \"HTTP/2 edgeproxy, 1.1 google\");\r",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');       \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"public\": false\r\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{existing_playlist}}/followers",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{existing_playlist}}",
								"followers"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC24_Pos_Unfollow Playlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {",
									"    case 200:",
									"        tests[\"200 ok. The request has succeeded\"] = true;",
									"        break;",
									"    case 400:",
									"        tests[\"400 Bad Request\"] = false;",
									"        break;",
									"    case 401:",
									"        tests[\"401 Bad or expired token\"] = false;",
									"        break;",
									"    case 403:",
									"        tests[\"403 Bad OAuth request\"] = false;",
									"        break;",
									"    case 429:",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;",
									"        break;",
									"    default:",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
									"}",
									"",
									"pm.test(\"Response time is less than 800 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test(\"Response Size is less than 2Kb\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);",
									"});",
									"",
									"pm.test(\"Response must be ok to be processed\", function () {",
									"    pm.response.to.not.be.error;",
									"    ",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"});",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    ",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");",
									"    pm.response.to.have.header(\"Content-Length\", \"0\");",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");     ",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");",
									"    pm.response.to.have.header(\"server\", \"envoy\");",
									"    pm.response.to.have.header(\"Via\", \"HTTP/2 edgeproxy, 1.1 google\");",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');          ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\n"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{existing_playlist}}/followers",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{existing_playlist}}",
								"followers"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC25_Pos_Get Specific Playlists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {",
									"    case 200:",
									"        tests[\"200 ok. The request has succeeded\"] = true;",
									"        break;",
									"    case 400:",
									"        tests[\"400 Bad Request\"] = false;",
									"        break;",
									"    case 401:",
									"        tests[\"401 Bad or expired token\"] = false;",
									"        break;",
									"    case 403:",
									"        tests[\"403 Bad OAuth request\"] = false;",
									"        break;",
									"    case 429:",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;",
									"        break;",
									"    default:",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
									"}",
									"",
									"pm.test(\"Response time is less than 800 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test(\"Response Size is less than 2Kb\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);",
									"});",
									"",
									"pm.test(\"Response must be ok to be processed\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"});",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");",
									"    pm.response.to.have.header(\"cache-control\", \"public, max-age=0\");",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");",
									"    pm.response.to.have.header(\"content-encoding\", \"gzip\");",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");",
									"    pm.response.to.have.header(\"server\", \"envoy\");",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');",
									"});",
									"",
									"pm.test(\"The response body contains the correct data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.collaborative).to.eql(false);",
									"    pm.expect(jsonData.external_urls.spotify).to.eql(\"https://open.spotify.com/playlist/\" + pm.environment.get(\"playlist_id\"));",
									"    pm.expect(jsonData.followers.href).to.eql(null);",
									"    pm.expect(jsonData.followers.total).to.eql(0);",
									"    pm.expect(jsonData.href).to.eql(\"https://api.spotify.com/v1/playlists/\" + pm.environment.get(\"playlist_id\"));",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"playlist_id\"));",
									"    pm.expect(jsonData.images).to.eql([]);    ",
									"    pm.expect(jsonData.owner.display_name).to.eql(\"rasacet733\");",
									"    pm.expect(jsonData.owner.external_urls.spotify).to.eql(\"https://open.spotify.com/user/\" + pm.environment.get(\"user_id\"));",
									"    pm.expect(jsonData.owner.href).to.eql(\"https://api.spotify.com/v1/users/\" + pm.environment.get(\"user_id\"));",
									"    pm.expect(jsonData.owner.id).to.eql(pm.environment.get(\"user_id\"));",
									"    pm.expect(jsonData.owner.type).to.eql(\"user\");",
									"    pm.expect(jsonData.owner.uri).to.eql(\"spotify:user:\" + pm.environment.get(\"user_id\"));",
									"    pm.expect(jsonData.primary_color).to.eql(null);",
									"    pm.expect(jsonData.public).to.eql(false);",
									"    pm.expect(jsonData.tracks.href).to.eql(\"https://api.spotify.com/v1/playlists/\"+ pm.environment.get(\"playlist_id\") + \"/tracks?offset=0&limit=100\");",
									"    pm.expect(jsonData.tracks.items).to.eql([]);",
									"    pm.expect(jsonData.tracks.limit).to.eql(100);",
									"    pm.expect(jsonData.tracks.next).to.eql(null);",
									"    pm.expect(jsonData.tracks.offset).to.eql(0);",
									"    pm.expect(jsonData.tracks.previous).to.eql(null);",
									"    pm.expect(jsonData.tracks.total).to.eql(0);",
									"    pm.expect(jsonData.type).to.eql(\"playlist\");",
									"    pm.expect(jsonData.uri).to.eql(\"spotify:playlist:\"+ pm.environment.get(\"playlist_id\"));",
									"});",
									"",
									"pm.test(\"The response body must be in the correct type\", function() {",
									"    let jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.collaborative).to.be.a(\"boolean\");",
									"    pm.expect(jsonResponse.description).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.external_urls.spotify).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.followers.href).to.be.a(\"null\");",
									"    pm.expect(jsonResponse.followers.total).to.be.a(\"number\");",
									"    pm.expect(jsonResponse.href).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.id).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.name).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.owner.display_name).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.owner.external_urls.spotify).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.owner.href).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.owner.id).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.owner.type).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.owner.uri).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.primary_color).to.be.a(\"null\");",
									"    pm.expect(jsonResponse.public).to.be.a(\"boolean\");",
									"    pm.expect(jsonResponse.tracks.href).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.tracks.limit).to.be.a(\"number\");",
									"    pm.expect(jsonResponse.tracks.next).to.be.a(\"null\");",
									"    pm.expect(jsonResponse.tracks.offset).to.be.a(\"number\");",
									"    pm.expect(jsonResponse.tracks.previous).to.be.a(\"null\");",
									"    pm.expect(jsonResponse.tracks.total).to.be.a(\"number\");",
									"    pm.expect(jsonResponse.type).to.be.a(\"string\");",
									"    pm.expect(jsonResponse.uri).to.be.a(\"string\");  ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{playlist_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "TC26.1_Neg_Create Playlist _inv_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {",
									"    case 201:",
									"        tests[\"201 ok. The request has succeeded\"] = false;",
									"        break;",
									"    case 400:",
									"        tests[\"400 Bad Request\"] = true;",
									"        break;",
									"    case 401:",
									"        tests[\"401 Bad or expired token\"] = false;",
									"        break;",
									"    case 403:",
									"        tests[\"403 Bad OAuth request\"] = false;",
									"        break;",
									"    case 429:",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;",
									"        break;",
									"    default:",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
									"}",
									"",
									"pm.test(\"Response time is less than 800 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test(\"Response Size is less than 2Kb\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);",
									"});",
									"",
									"pm.test(\"Response must be with the correct expected data\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;       ",
									"});",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");",
									"    pm.response.to.have.header(\"content-encoding\", \"gzip\");",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");",
									"    pm.response.to.have.header(\"server\", \"envoy\");",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');",
									"});",
									"",
									"pm.test(\"The response body contains the correct data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.status).to.eql(400);",
									"    pm.expect(jsonData.error.message).to.eql(\"Error parsing JSON.\");",
									"    ",
									"});",
									"",
									"pm.test(\"The response body must be in the correct type\", function() {",
									"    let jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.error.status).to.be.a(\"number\");",
									"    pm.expect(jsonResponse.error.message).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": one,\n  \"public\": \"false\"\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/users/{{user_id}}/playlists",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"users",
								"{{user_id}}",
								"playlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC26.2_Neg_Create Playlist_inv_public",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {",
									"    case 201:",
									"        tests[\"201 ok. The request has succeeded\"] = false;",
									"        break;",
									"    case 400:",
									"        tests[\"400 Bad Request\"] = true;",
									"        break;",
									"    case 401:",
									"        tests[\"401 Bad or expired token\"] = false;",
									"        break;",
									"    case 403:",
									"        tests[\"403 Bad OAuth request\"] = false;",
									"        break;",
									"    case 429:",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;",
									"        break;",
									"    default:",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
									"}",
									"",
									"pm.test(\"Response time is less than 800 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test(\"Response Size is less than 2Kb\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);",
									"});",
									"",
									"pm.test(\"Response must be with the correct expected data\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;       ",
									"});",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");",
									"    pm.response.to.have.header(\"content-encoding\", \"gzip\");",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");",
									"    pm.response.to.have.header(\"server\", \"envoy\");",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');",
									"});",
									"",
									"pm.test(\"The response body contains the correct data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.status).to.eql(400);",
									"    pm.expect(jsonData.error.message).to.eql(\"Error parsing JSON.\");",
									"    ",
									"});",
									"",
									"pm.test(\"The response body must be in the correct type\", function() {",
									"    let jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.error.status).to.be.a(\"number\");",
									"    pm.expect(jsonResponse.error.message).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{playlist_name}}\",\n  \"public\": \"0\"\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/users/{{user_id}}/playlists",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"users",
								"{{user_id}}",
								"playlists"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC27.1_Neg_Change Playlist Details_inv_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {\r",
									"    case 201:\r",
									"        tests[\"201 ok. The request has succeeded\"] = false;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 Bad Request\"] = true;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 Bad or expired token\"] = false;\r",
									"        break;\r",
									"    case 403:\r",
									"        tests[\"403 Bad OAuth request\"] = false;\r",
									"        break;\r",
									"    case 429:\r",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 800 ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Size is less than 2Kb\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be with the correct expected data\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;       \r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");\r",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");\r",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");\r",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");\r",
									"    pm.response.to.have.header(\"content-encoding\", \"gzip\");\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"server\", \"envoy\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');\r",
									"});\r",
									"\r",
									"pm.test(\"The response body contains the correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.status).to.eql(400);\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Error parsing JSON.\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"The response body must be in the correct type\", function() {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.error.status).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.error.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": -,\r\n    \"description\": \"{{description}}\",\r\n    \"public\": false\r\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{playlist_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC27.2_Neg_Change Playlist Details_inv_description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {\r",
									"    case 201:\r",
									"        tests[\"201 ok. The request has succeeded\"] = false;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 Bad Request\"] = true;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 Bad or expired token\"] = false;\r",
									"        break;\r",
									"    case 403:\r",
									"        tests[\"403 Bad OAuth request\"] = false;\r",
									"        break;\r",
									"    case 429:\r",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 800 ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Size is less than 2Kb\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be with the correct expected data\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;       \r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");\r",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");\r",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");\r",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");\r",
									"    pm.response.to.have.header(\"content-encoding\", \"gzip\");\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"server\", \"envoy\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');\r",
									"});\r",
									"\r",
									"pm.test(\"The response body contains the correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.status).to.eql(500);\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Server error.\");    \r",
									"});\r",
									"\r",
									"pm.test(\"The response body must be in the correct type\", function() {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.error.status).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.error.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{playlist_name}}\",\r\n    \"description\": 0,\r\n    \"public\": false\r\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{playlist_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC27.3_Neg_Change Playlist Details_inv_public",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {\r",
									"    case 201:\r",
									"        tests[\"201 ok. The request has succeeded\"] = false;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 Bad Request\"] = true;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 Bad or expired token\"] = false;\r",
									"        break;\r",
									"    case 403:\r",
									"        tests[\"403 Bad OAuth request\"] = false;\r",
									"        break;\r",
									"    case 429:\r",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;\r",
									"        break;\r",
									"    case 500:\r",
									"        tests[\"500 Internal Server Error\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 800 ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Size is less than 2Kb\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be with the correct expected data\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;       \r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");\r",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");\r",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");\r",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");\r",
									"    pm.response.to.have.header(\"content-encoding\", \"gzip\");\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"server\", \"envoy\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');\r",
									"});\r",
									"\r",
									"pm.test(\"The response body contains the correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.status).to.eql(400);\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Boolean value must be either true or false\");    \r",
									"});\r",
									"\r",
									"pm.test(\"The response body must be in the correct type\", function() {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.error.status).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.error.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{playlist_name}} \",\r\n    \"description\": \"{{description}}\",\r\n    \"public\": 0\r\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{playlist_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC28.1_Neg_Add Items to Playlist_invalid_data_in_body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {\r",
									"    case 201:\r",
									"        tests[\"201 ok. The request has succeeded\"] = false;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 Bad Request\"] = true;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 Bad or expired token\"] = false;\r",
									"        break;\r",
									"    case 403:\r",
									"        tests[\"403 Bad OAuth request\"] = false;\r",
									"        break;\r",
									"    case 429:\r",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 800 ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Size is less than 2Kb\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be with the correct expected data\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;       \r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");\r",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");\r",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");\r",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");\r",
									"    pm.response.to.have.header(\"content-encoding\", \"gzip\");\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"server\", \"envoy\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');\r",
									"});\r",
									"\r",
									"pm.test(\"The response body contains the correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.status).to.eql(400);\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Error parsing JSON.\");  \r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"The response body must be in the correct type\", function() {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.error.status).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.error.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n        one\n    \n    \"position\": 0\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{playlist_id}}",
								"tracks"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC28.2_Neg_Add Items to Playlist_invalid_uris",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {\r",
									"    case 201:\r",
									"        tests[\"201 ok. The request has succeeded\"] = false;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 Bad Request\"] = true;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 Bad or expired token\"] = false;\r",
									"        break;\r",
									"    case 403:\r",
									"        tests[\"403 Bad OAuth request\"] = false;\r",
									"        break;\r",
									"    case 429:\r",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 800 ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Size is less than 2Kb\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be with the correct expected data\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;       \r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");\r",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");\r",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");\r",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");\r",
									"    pm.response.to.have.header(\"content-encoding\", \"gzip\");\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"server\", \"envoy\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');\r",
									"});\r",
									"\r",
									"pm.test(\"The response body contains the correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.status).to.eql(400);\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Invalid track uri: spotify:track:1\");  // when changing the data in the enviroments(track_uris), need to change the number in the test (track:)\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"The response body must be in the correct type\", function() {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.error.status).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.error.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"uris\": [\n        \"spotify:track:{{wrong_uris}}\"\n    ],\n    \"position\": 0\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{playlist_id}}",
								"tracks"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC28.3_Neg_Add Items to Playlist_position_negative_num",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {\r",
									"    case 201:\r",
									"        tests[\"201 ok. The request has succeeded\"] = false;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 Bad Request\"] = true;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 Bad or expired token\"] = false;\r",
									"        break;\r",
									"    case 403:\r",
									"        tests[\"403 Bad OAuth request\"] = false;\r",
									"        break;\r",
									"    case 429:\r",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 800 ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Size is less than 2Kb\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be with the correct expected data\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;       \r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");\r",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");\r",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");\r",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");\r",
									"    pm.response.to.have.header(\"content-encoding\", \"gzip\");\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"server\", \"envoy\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');\r",
									"});\r",
									"\r",
									"pm.test(\"The response body contains the correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.status).to.eql(400);\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Invalid position, must be positive.\");\r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"The response body must be in the correct type\", function() {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.error.status).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.error.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"uris\": [\n        \"spotify:track:4wGSg2Qqpt2sGCWuAZj6EN\"\n    ],\n    \"position\": -1\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{playlist_id}}",
								"tracks"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC29.1_Neg_Delete Playlist Items_invalid_uris",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {",
									"    case 201:",
									"        tests[\"201 ok. The request has succeeded\"] = false;",
									"        break;",
									"    case 400:",
									"        tests[\"400 Bad Request\"] = true;",
									"        break;",
									"    case 401:",
									"        tests[\"401 Bad or expired token\"] = false;",
									"        break;",
									"    case 403:",
									"        tests[\"403 Bad OAuth request\"] = false;",
									"        break;",
									"    case 429:",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;",
									"        break;",
									"    default:",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
									"}",
									"",
									"pm.test(\"Response time is less than 800 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test(\"Response Size is less than 2Kb\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);",
									"});",
									"",
									"pm.test(\"Response must be with the correct expected data\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;       ",
									"});",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");",
									"    pm.response.to.have.header(\"content-encoding\", \"gzip\");",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");",
									"    pm.response.to.have.header(\"server\", \"envoy\");",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');",
									"});",
									"",
									"pm.test(\"The response body contains the correct data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.status).to.eql(400);",
									"    pm.expect(jsonData.error.message).to.eql(\"JSON body contains an invalid track uri: spotify:track:1\");  // when changing the data in the enviroments(track_uris), need to change the number in the test (track:)",
									"    ",
									"});",
									"",
									"pm.test(\"The response body must be in the correct type\", function() {",
									"    let jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.error.status).to.be.a(\"number\");",
									"    pm.expect(jsonResponse.error.message).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tracks\": [\n        {\n            \"uri\": \"spotify:track:{{wrong_uris}}\"\n        }\n       \n    ]\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{playlist_id}}",
								"tracks"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC29.2_Neg_Delete Playlist Items_invalid_body_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {",
									"    case 201:",
									"        tests[\"201 ok. The request has succeeded\"] = false;",
									"        break;",
									"    case 400:",
									"        tests[\"400 Bad Request\"] = true;",
									"        break;",
									"    case 401:",
									"        tests[\"401 Bad or expired token\"] = false;",
									"        break;",
									"    case 403:",
									"        tests[\"403 Bad OAuth request\"] = false;",
									"        break;",
									"    case 429:",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;",
									"        break;",
									"    default:",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
									"}",
									"",
									"pm.test(\"Response time is less than 800 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test(\"Response Size is less than 2Kb\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);",
									"});",
									"",
									"pm.test(\"Response must be with the correct expected data\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;       ",
									"});",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");",
									"    pm.response.to.have.header(\"content-encoding\", \"gzip\");",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");",
									"    pm.response.to.have.header(\"server\", \"envoy\");",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');",
									"});",
									"",
									"pm.test(\"The response body contains the correct data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.status).to.eql(400);",
									"    pm.expect(jsonData.error.message).to.eql(\"JSON body doesn't conform to specification\");  ",
									"    ",
									"});",
									"",
									"pm.test(\"The response body must be in the correct type\", function() {",
									"    let jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.error.status).to.be.a(\"number\");",
									"    pm.expect(jsonResponse.error.message).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "one"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{playlist_id}}",
								"tracks"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC29.3_Neg_Delete Playlist Items_Empty_body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {",
									"    case 201:",
									"        tests[\"201 ok. The request has succeeded\"] = false;",
									"        break;",
									"    case 400:",
									"        tests[\"400 Bad Request\"] = true;",
									"        break;",
									"    case 401:",
									"        tests[\"401 Bad or expired token\"] = false;",
									"        break;",
									"    case 403:",
									"        tests[\"403 Bad OAuth request\"] = false;",
									"        break;",
									"    case 429:",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;",
									"        break;",
									"    default:",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;",
									"}",
									"",
									"pm.test(\"Response time is less than 800 ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(800);",
									"});",
									"",
									"pm.test(\"Response Size is less than 2Kb\", function () {",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);",
									"});",
									"",
									"pm.test(\"Response must be with the correct expected data\", function () {",
									"    pm.response.to.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;       ",
									"});",
									"",
									"pm.test(\"Header is correct\", function () {",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");",
									"    pm.response.to.have.header(\"content-encoding\", \"gzip\");",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");",
									"    pm.response.to.have.header(\"server\", \"envoy\");",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');",
									"});",
									"",
									"pm.test(\"The response body contains the correct data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error.status).to.eql(400);",
									"    pm.expect(jsonData.error.message).to.eql(\"JSON body contains a track without URI.\");  ",
									"    ",
									"});",
									"",
									"pm.test(\"The response body must be in the correct type\", function() {",
									"    let jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse.error.status).to.be.a(\"number\");",
									"    pm.expect(jsonResponse.error.message).to.be.a(\"string\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tracks\": [\n        {\n            \n        }\n       \n    ]\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{playlist_id}}/tracks",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{playlist_id}}",
								"tracks"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC30.1_Neg_Follow Playlist_empty_request_body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {\r",
									"    case 201:\r",
									"        tests[\"201 ok. The request has succeeded\"] = false;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 Bad Request\"] = false;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 Bad or expired token\"] = false;\r",
									"        break;\r",
									"    case 403:\r",
									"        tests[\"403 Bad OAuth request\"] = true;\r",
									"        break;\r",
									"    case 429:\r",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 800 ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Size is less than 2Kb\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be with the correct expected data\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;       \r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");\r",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");\r",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");\r",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");\r",
									"    pm.response.to.have.header(\"content-encoding\", \"gzip\");\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"server\", \"envoy\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');\r",
									"});\r",
									"\r",
									"pm.test(\"The response body contains the correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.status).to.eql(403);\r",
									"    pm.expect(jsonData.error.message).to.eql(\"Insufficient scope\");  \r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"The response body must be in the correct type\", function() {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.error.status).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.error.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{existing_playlist}}/followers",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{existing_playlist}}",
								"followers"
							]
						}
					},
					"response": []
				},
				{
					"name": "TC30.2_Neg_Follow Playlist_invalid_public_data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"switch (responseCode.code) {\r",
									"    case 201:\r",
									"        tests[\"201 ok. The request has succeeded\"] = false;\r",
									"        break;\r",
									"    case 400:\r",
									"        tests[\"400 Bad Request\"] = true;\r",
									"        break;\r",
									"    case 401:\r",
									"        tests[\"401 Bad or expired token\"] = false;\r",
									"        break;\r",
									"    case 403:\r",
									"        tests[\"403 Bad OAuth request\"] = false;\r",
									"        break;\r",
									"    case 429:\r",
									"        tests[\"429 The app has exceeded its rate limits\"] = false;\r",
									"        break;\r",
									"    default:\r",
									"        tests[\"Sorry, we are out of\" + responseCode.code] = false;\r",
									"}\r",
									"\r",
									"pm.test(\"Response time is less than 800 ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									"\r",
									"pm.test(\"Response Size is less than 2Kb\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(2048);\r",
									"});\r",
									"\r",
									"pm.test(\"Response must be with the correct expected data\", function () {\r",
									"    pm.response.to.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;       \r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"content-type\", \"application/json; charset=utf-8\");\r",
									"    pm.response.to.have.header(\"cache-control\", \"private, max-age=0\");\r",
									"    pm.response.to.have.header(\"x-robots-tag\", \"noindex, nofollow\");\r",
									"    pm.response.to.have.header(\"access-control-allow-origin\", \"*\");\r",
									"    pm.response.to.have.header(\"access-control-allow-headers\", \"Accept, App-Platform, Authorization, Content-Type, Origin, Retry-After, Spotify-App-Version, X-Cloud-Trace-Context, client-token, content-access-token\");\r",
									"    pm.response.to.have.header(\"access-control-allow-methods\", \"GET, POST, OPTIONS, PUT, DELETE, PATCH\");\r",
									"    pm.response.to.have.header(\"access-control-allow-credentials\", \"true\");\r",
									"    pm.response.to.have.header(\"access-control-max-age\", \"604800\");\r",
									"    pm.response.to.have.header(\"content-encoding\", \"gzip\");\r",
									"    pm.response.to.have.header(\"strict-transport-security\", \"max-age=31536000\");\r",
									"    pm.response.to.have.header(\"x-content-type-options\", \"nosniff\");\r",
									"    pm.response.to.have.header(\"server\", \"envoy\");\r",
									"    pm.response.to.have.header(\"Transfer-Encoding\", \"chunked\");\r",
									"    pm.response.to.have.header(\"Alt-Svc\", 'h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000');\r",
									"});\r",
									"\r",
									"pm.test(\"The response body contains the correct data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.error.status).to.eql(400);\r",
									"    pm.expect(jsonData.error.message).to.eql(\"JSON body does not adhere to the defined endpoint parameters\");  \r",
									"    \r",
									"});\r",
									"\r",
									"pm.test(\"The response body must be in the correct type\", function() {\r",
									"    let jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.error.status).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.error.message).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer {{authorization}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"public\": {{wrong_uris}}\r\n}"
						},
						"url": {
							"raw": "https://api.spotify.com/v1/playlists/{{existing_playlist}}/followers",
							"protocol": "https",
							"host": [
								"api",
								"spotify",
								"com"
							],
							"path": [
								"v1",
								"playlists",
								"{{existing_playlist}}",
								"followers"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "My_token",
				"type": "string"
			},
			{
				"key": "challengeAlgorithm",
				"value": "S256",
				"type": "string"
			},
			{
				"key": "scope",
				"value": "playlist-read-private playlist-modify-private",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://www.getpostman.com/oauth2/callback",
				"type": "string"
			},
			{
				"key": "grant_type",
				"value": "authorization_code",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{client_secret}}",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{client_id}}",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "https://accounts.spotify.com/authorize",
				"type": "string"
			},
			{
				"key": "client_authentication",
				"value": "header",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "https://accounts.spotify.com/api/token",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}